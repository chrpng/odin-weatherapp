{"version":3,"sources":["components/current/Temperature.js","components/current/Conditions.js","components/details/Details.js","components/forecast/Forecast.js","components/mainContainer/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["Temperature","useContext","Context","main","celsiusFlag","setCelsiusFlag","temp","location","conditions","tempC","Math","round","tempF","tempElement","className","onClick","Conditions","conditionsSun","includes","conditionsClouds","conditionsRain","Details","details","highC","high","lowC","low","vis","visibility","Object","entries","length","wind","humidity","Forecast","forecast","forecastDisplay","map","instance","idx","relTime","moment","unix","time","calendar","sameDay","nextDay","nextWeek","key","src","icon","alt","MainContainer","createContext","App","useState","cityInput","setCityInput","setMain","setDetails","setForecast","setTime","loadingFlag","setLoadingFlag","fetchWeather","city","a","fetch","process","mode","response","ok","json","setWeather","console","log","getLocalHour","dt","timezone","weather","name","temp_max","temp_min","speed","shift","utc","hours","fetchForecast5","setForecast5","forecastArr","i","push","getForecastInfo","list","day","handleSubmit","e","preventDefault","Promise","all","useEffect","mainContainer","Provider","value","onSubmit","type","onChange","target","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.984c06bf.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { Context } from './../../App';\nimport './Temperature.scss'\n\nconst Temperature = () => {\n  const { main, celsiusFlag, setCelsiusFlag } = useContext(Context);\n  const { temp, location, conditions } = main;\n\n  let tempC = Math.round(temp - 273);\n  let tempF = Math.round((temp - 273) * 1.8) + 32;\n\n  const useC = () => {\n    setCelsiusFlag(true);\n  }\n  const useF = () => {\n    setCelsiusFlag(false);\n  }\n\n  const tempElement = celsiusFlag ? <div className=\"temp\">{tempC}°C</div> \n                                  : <div className=\"temp\">{tempF}°F</div>\n\n  return temp ? (\n    <div className=\"temp-panel\">\n      {/* <img className=\"temp-conditions-icon\" src={`http://openweathermap.org/img/wn/${icon}.png`} alt=\"\"/> */}\n      <div className=\"temp-convert\">\n        <button className={`temp-convertC${celsiusFlag ? \" active\" : \"\"}`} onClick={useC}>C</button>\n        <button className={`temp-convertF${!celsiusFlag ? \" active\" : \"\"}`} onClick={useF}>F</button>\n      </div>\n      <div className=\"temp-location\">{location}</div>\n      {tempElement}\n      <div className=\"temp-conditions\">{conditions}</div>\n    </div>\n  ) : null\n}\n\nexport default Temperature;","import React, { useContext } from 'react';\nimport { Context } from './../../App';\nimport './Conditions.scss';\n\nconst Conditions = () => {\n  const { main } = useContext(Context);\n  const { conditions } = main;\n\n  const sunConditionsArr = [\n    'Clear',\n  ]\n  const cloudConditionsArr = [\n    'Thunderstorm',\n    'Drizzle',\n    'Rain',\n    'Snow',\n    'Clouds',\n  ]\n  const rainConditionsArr = [\n    'Thunderstorm',\n    'Drizzle',\n    'Rain',\n  ]\n\n  const conditionsSun = sunConditionsArr.includes(conditions) ? (\n    <div className=\"conditions-sun\"></div>\n  ) : null;\n  const conditionsClouds = cloudConditionsArr.includes(conditions) ? (\n    <div className=\"conditions-clouds\"></div>\n  ) : null;\n  const conditionsRain = rainConditionsArr.includes(conditions) ? (\n    <div className=\"conditions-rain\"></div>\n  ) : null;\n\n  return conditions ? (\n    <div className=\"conditions-panel\">\n      <div className=\"conditions-gradient\">\n        {conditionsSun}\n        {conditionsClouds}\n        {conditionsRain}\n        <div className=\"conditions-mountains\"></div>\n      </div>\n    </div>\n  ) : null\n}\n\nexport default Conditions;","import React, { useContext } from 'react';\nimport { Context } from './../../App';\nimport './Details.scss';\n\nconst Details = () => {\n  const { details } = useContext(Context);\n\n  let highC = Math.round(details.high - 273);\n  let lowC = Math.round(details.low - 273);\n  let vis = details.visibility / 1000;\n  return Object.entries(details).length !== 0 ? (\n    <ul className=\"details-panel\">\n      <li>\n        <div>High / Low</div>\n        <div>{highC}° / {lowC}°</div>\n      </li>\n      <li>\n        <div>Wind</div>\n        <div>{details.wind} km/h</div>\n      </li>\n      <li>\n        <div>Humidity</div>\n        <div>{details.humidity}%</div>\n      </li>\n      <li>\n        <div>Visibility</div>\n        <div>{vis} km</div>\n      </li>\n    </ul>\n  ) : null\n}\n \nexport default Details;","import React, { useContext } from 'react';\nimport { Context } from './../../App';\nimport moment from 'moment';\nimport './Forecast.scss';\n\nconst Forecast = () => {\n  const { forecast, celsiusFlag } = useContext(Context);\n\n  const forecastDisplay = forecast.map((instance, idx) => {\n    let relTime = moment.unix(instance.time).calendar(null, {\n      sameDay: '[Today]',\n      nextDay: 'ddd',\n      nextWeek: 'ddd',\n    })\n    \n    let tempC = Math.round(instance.temp - 273);\n    let tempF = Math.round((instance.temp - 273) * 1.8) + 32;\n\n    const tempElement = celsiusFlag ? <div className=\"forecast-temp\">{tempC}°C</div> \n                                    : <div className=\"forecast-temp\">{tempF}°F</div>\n\n    return (\n      <li key={idx}>\n        {tempElement}\n        <div className=\"forecast-conditions\">{instance.conditions}</div>\n        <img src={`http://openweathermap.org/img/wn/${instance.icon}.png`} alt={instance.conditions}/>\n        <div>{relTime}</div>\n      </li>\n    )\n  })\n\n  return forecast ? (\n    <ul className=\"forecast-panel\">\n      {forecastDisplay}\n    </ul>\n  ) : null\n}\n \nexport default Forecast;","import React from 'react';\nimport Temperature from './../current/Temperature';\nimport Conditions from './../current/Conditions';\nimport Details from './../details/Details';\nimport Forecast from './../forecast/Forecast';\n\nfunction MainContainer({ time }) {\n  return (\n    <main className={time > 6 && time <=15 ? \"day\" : ( time > 15 && time < 18 ? \"evening\" : \"night\" )}>\n      <Temperature></Temperature>\n      <Conditions></Conditions>\n      <Details></Details>\n      <Forecast></Forecast>\n    </main>\n  )\n}\n\nexport default MainContainer;","import React, { useState, useEffect, createContext } from 'react';\nimport MainContainer from './components/mainContainer/MainContainer';\nimport moment from 'moment';\n\nimport './App.scss';\n\nexport const Context = createContext();\n\nfunction App() {\n  const [ cityInput, setCityInput ] = useState('');\n  const [ main, setMain ] = useState({});\n  const [ details, setDetails ] = useState({});\n  const [ forecast, setForecast ] = useState([]);\n  const [ time, setTime ] = useState('');\n  const [ celsiusFlag, setCelsiusFlag ] = useState(true);\n  const [ loadingFlag, setLoadingFlag ] = useState(false);\n\n  const fetchWeather = async (city) => {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_OPENWEATHERMAP_API_KEY}`, { mode: 'cors' });\n      \n      //try catch?\n      if(response.ok) {\n        const json = await response.json();\n        setWeather(json);\n        console.log(json);\n        setTime(getLocalHour(json.dt, json.timezone));\n      }\n    } catch(err) {\n      console.log(err);\n    }\n  }\n\n  const setWeather = (json) => {\n    setMain({\n      conditions: json.weather[0].main,\n      location: json.name,\n      temp: json.main.temp,\n      icon: json.weather[0].icon,\n    });\n    setDetails({\n      high: json.main.temp_max,\n      low: json.main.temp_min,\n      wind: json.wind.speed,\n      humidity: json.main.humidity,\n      visibility: json.visibility\n    });\n  }\n  \n  const getLocalHour = (unix, shift) => {\n    return moment.unix(unix + shift).utc().hours();\n  }\n\n  const fetchForecast5 = async (city) => {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${process.env.REACT_APP_OPENWEATHERMAP_API_KEY}`, { mode: 'cors' });\n    if(response.ok) {\n      const json = await response.json();\n      setForecast5(json);\n    }\n  }\n\n  const setForecast5 = (json) => {\n    let forecastArr = [];\n    for (let i = 0; i < 40; i = i + 8) {\n      forecastArr.push(getForecastInfo(json.list[i]));\n    }\n    setForecast(forecastArr)\n  }\n\n  const getForecastInfo = (day) => {\n    return {\n      time: day.dt,\n      conditions: day.weather[0].main,\n      temp: day.main.temp,\n      icon: day.weather[0].icon,\n    }\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoadingFlag(true);\n\n    //await? Promise.all\n    //check why .then doesn't seesn't seem to wait\n    await Promise.all([\n      fetchWeather(cityInput),\n      fetchForecast5(cityInput),\n      // new Promise(resolve => {\n      //   setTimeout(() => {\n      //     console.log('waiting')\n      //     resolve()\n      //   }, 5000)\n      // })\n    ])\n\n    setLoadingFlag(false)\n  }\n\n  const handleChange = (e) => {\n    setCityInput(e.target.value)\n  }\n\n  // Only for testing\n  useEffect(() => {\n    fetchWeather('Seoul');\n    fetchForecast5('Seoul');\n  }, [])\n\n  const mainContainer = !loadingFlag ? (\n    <MainContainer time={time}></MainContainer>\n  ) : (\n    <div className=\"loading\">loading...</div>\n  );\n\n  return (\n    <Context.Provider value={{ main, details, forecast, celsiusFlag, setCelsiusFlag }}>\n      <header>Weather App, by chrpng</header>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" onChange={handleChange}/>\n        <button><i className=\"fas fa-search\"></i></button>\n      </form>\n      { mainContainer }\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}